version: "3.3"

networks:
  net:

services:

  zookeeper:
      image: confluentinc/cp-zookeeper:5.1.0
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - 2181:2181
      networks:
        - net
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
      image: confluentinc/cp-kafka:5.1.0
      ports:
        - 9092:9092
      restart: always
      depends_on:
        - zookeeper
      environment:
        KAFKA_LISTENERS: PLAINTEXT://kafka:9092
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      hostname: kafka
      container_name: kafka-stream
      networks:
        - net
      restart: always

  dashboard:
     build: ./dashboard
     depends_on:
      - "cassandra1"
     depends_on:
       - "cassandra2"
     depends_on:
       - "cassandra3"
  
  cassandra1:
    image: 'bitnami/cassandra:latest'   # better to use a specific version, if you want to control upgrades
    container_name: cassandra1
    hostname: cassandra1
    healthcheck:
        test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
        interval: 5s
        timeout: 5s
        retries: 60
    networks:
      - net
    ports:
      - "9042:9042"  # Expose native binary CQL port for your apps
    volumes:
      - ./cassandra1/db/schema.cql:/schema.cql   
      - ./cassandra1/conf:/etc/cassandra   # Use your own config files for full control
    environment: &environment    # Declare and save environments variables into "environment"
        CASSANDRA_SEEDS: "cassandra1,cassandra2"    # The first two nodes will be seeds
        CASSANDRA_CLUSTER_NAME: ServingLayer
        CASSANDRA_DC: ServingLayer
        CASSANDRA_RACK: ServingLayer
        CASSANDRA_ENDPOINT_SNITCH: ServingLayer
        CASSANDRA_NUM_TOKENS: 128

  cassandra2:
    image: 'bitnami/cassandra:latest'
    container_name: cassandra2
    hostname: cassandra2
    healthcheck:
        test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
        interval: 5s
        timeout: 5s
        retries: 60
    networks:
      - net
    ports:
      - "9043:9042"  # Expose native binary CQL port for your apps
    volumes:
      - ./cassandra2/db/schema.cql:/schema.cql   
      - ./cassandra2/conf:/etc/cassandra   # Use your own config files for full control
    environment: *environment    # point to "environment" to use the same environment variables as cassandra1
    depends_on:
      - "cassandra1"   # start cassandra2 only after cassandra1 is healthy

  cassandra3:
    image: 'bitnami/cassandra:latest'
    container_name: cassandra3
    hostname: cassandra3
    healthcheck:
        test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
        interval: 5s
        timeout: 5s
        retries: 60
    networks:
      - net
    ports:
      - "9044:9042"  # Expose native binary CQL port for your apps
    volumes:
      - ./cassandra3/db/schema.cql:/schema.cql   
      - ./cassandra3/conf:/etc/cassandra   # Use your own config files for full control
    environment: *environment    # point to "environment" to use the same environment variables as cassandra1
    depends_on:
       - "cassandra2"    # start cassandra3 only after cassandra1 is healthy



  spark-master:
    image: bde2020/spark-master:3.1.1-hadoop3.2
    container_name: spark-master
    hostname: spark-master
    healthcheck:
      interval: 5s
      retries: 100
    ports:
      - "8080:8080"
      - "7077:7077"
      - "4040:4040"
      - "4041:4041"
    environment:
      - INIT_DAEMON_STEP=false
      - SPARK_DRIVER_HOST=192.168.1.5
    volumes:
      - ./spark-streaming-processor/target:/opt/spark-data
    networks:
      - net

  spark-worker-1:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-1
    hostname: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    volumes:
      - ./data/spark/:/opt/spark-data
    networks:
      - net

  spark-worker-2:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-2
    hostname: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    volumes:
      - ./data/spark/:/opt/spark-data
    networks:
      - net

